/*

        _..._            ★ ° . *　　　°　.　°☆ 　. * ● ¸ .　 * 　.　 　★     ° :.☆
      .'     '.      _   . 　　　★ 　° :. ★　 * • ○ ° ★　 . 　　　★ 　° :. 　 * • ○ ° ★　 
     /    .-""-\   _/ \  .　 * 　.　 　　　　　. 　 ★ ° . *　　　°　.　°☆ 　. * ● ¸ 
   .-|   /:.   |  |   |  ° 　. ● . ★ ° . *　　　°　.　°☆ ° . *　　　°　.　°☆ 　. * ● ¸ . 
   |  \  |:.   /.-'-./   　. * ● ¸ . 　　　★ 　° :●. 　 * ° °☆ 　¸. ● . 　　★　★ 
   | .-'-;:__.'    =/    • ○ ° ★　 .　 * 　.　 　　　　　.　★　　　　. 　 ° 　.  . 　    ★　 　　
   .'=  *=|     _.='      　 ° 　. ● . ★ ° . *　　　°　.　° :. 　 * • ○ ° ★　 .　 * 　.　 
  /   _.  |    ;       °☆ 　. * ● ¸ . 　　　★ 　°☆ 　. * ● ¸ . 　　　★ 　
 ;-.-'|    \   |      ° :. 　 * • ○ ° ★　 .　 * 　.　  　 ° 　. ● . ★ ° . *　　　°　.　
/   | \    _\  _\     　★　　　　. 　 ° 　.  . 　    ★　 　　• ○ ° ★　 .　 * 　.　 　　　　　.
\__/'._;.  ==' ==\    ° °☆ 　¸. ● . 　　★　★ 　. * ● ¸ . 　　　★ 　° :●. 　 * 
         \    \   |   ° . *　　　°　.　°☆ 　. * ● ¸ . ° 　. ● . ★ ° . *　　　°　.　°☆ 
         /    /   /   ★ ° . *　　　°　.　°☆ 　. * ● ¸ .　 * 　.　 　　　　　. 　 
         /-._/-._/   . 　　　★ 　° :. 　 * • ○ ° ★　 . 　　　★ 　° :. ★　 * • ○ ° ★　 
         \   `\  \  .　 * 　.　 　★     ° :.☆★ ° . *　　　°　.　°☆ 　. * ● ¸ 
          `-._/._/  

              .........                     ╔═══╗╔═══╗╔════╗╔═══╗╔╗─╔╗╔════╗╔╗─╔╗╔═══╗╔═══╗
            .'------.' |                    ║╔══╝║╔═╗║║╔╗╔╗║║╔═╗║║║─║║║╔╗╔╗║║║─║║║╔═╗║║╔═╗║
           | .-----. | |                    ║╚══╗║╚══╗╚╝║║╚╝║╚═╝║║║─║║╚╝║║╚╝║║─║║║╚═╝║║║─║║
           | |     | | |                    ║╔══╝╚══╗║──║║──║╔╗╔╝║║─║║──║║──║║─║║║╔╗╔╝║╚═╝║
         __| |     | | |;. _______________  ║╚══╗║╚═╝║──║║──║║║╚╗║╚═╝║──║║──║╚═╝║║║║╚╗║╔═╗║
        /  |*`-----'.|.' `;              // ╚═══╝╚═══╝──╚╝──╚╝╚═╝╚═══╝──╚╝──╚═══╝╚╝╚═╝╚╝─╚╝
       /   `---------' .;'              //      ╔═══╗╔═══╗     ╔═══╗╔═══╗╔═══╗╔═══╗╔═══╗
 /|   /  .''''////////;'               //       ╚╗╔╗║║╔══╝     ╚╗╔╗║║╔═╗║╚╗╔╗║║╔═╗║║╔═╗║
|=|  .../ ######### /;/               //|       ─║║║║║╚══╗     ─║║║║║║─║║─║║║║║║─║║║╚══╗
|/  /  / ######### //                //||       ─║║║║║╔══╝     ─║║║║║╚═╝║─║║║║║║─║║╚══╗║
   /   `-----------'                // ||       ╔╝╚╝║║╚══╗     ╔╝╚╝║║╔═╗║╔╝╚╝║║╚═╝║║╚═╝║
  /________________________________//| ||       ╚═══╝╚═══╝     ╚═══╝╚╝─╚╝╚═══╝╚═══╝╚═══╝
  `--------------------------------' | ||   
   : | ||      | || |__LL__|| ||     | ||     █▀█ █▀█ █▀█ █▀▀ ░   █▀▀ ▄▀█ █░█ █▀ ▀█▀ █▀█
   : | ||      | ||         | ||     `""'     █▀▀ █▀▄ █▄█ █▀░ ▄   █▀░ █▀█ █▄█ ▄█ ░█░ █▄█
   n | ||      `""'         | ||              
   M | ||                   | ||                       █▀▀ █ █▄░█ ▀█▀ █▀█ ▄▀█
     | ||                   | ||                       █▄▄ █ █░▀█ ░█░ █▀▄ █▀█
     `""'                   `""'
*/

// ║▌║█║▌│║▌║▌█║▌║█║▌│║▌║▌█║▌║█║▌│║▌║▌█║▌║█║▌│║▌║▌║█║▌│║▌║▌█║▌║█║▌│║▌║▌█║▌║█║▌│║▌║▌█║▌║█║▌│║▌

/**
 
██╗░░░██╗███████╗████████╗░█████╗░██████╗░  ██████╗░███████╗
██║░░░██║██╔════╝╚══██╔══╝██╔══██╗██╔══██╗  ██╔══██╗██╔════╝
╚██╗░██╔╝█████╗░░░░░██║░░░██║░░██║██████╔╝  ██║░░██║█████╗░░
░╚████╔╝░██╔══╝░░░░░██║░░░██║░░██║██╔══██╗  ██║░░██║██╔══╝░░
░░╚██╔╝░░███████╗░░░██║░░░╚█████╔╝██║░░██║  ██████╔╝███████╗
░░░╚═╝░░░╚══════╝░░░╚═╝░░░░╚════╝░╚═╝░░╚═╝  ╚═════╝░╚══════╝

    ███████╗██████╗░██╗░░░██╗████████╗░█████╗░░██████╗
    ██╔════╝██╔══██╗██║░░░██║╚══██╔══╝██╔══██╗██╔════╝
    █████╗░░██████╔╝██║░░░██║░░░██║░░░███████║╚█████╗░
    ██╔══╝░░██╔══██╗██║░░░██║░░░██║░░░██╔══██║░╚═══██╗
    ██║░░░░░██║░░██║╚██████╔╝░░░██║░░░██║░░██║██████╔╝
    ╚═╝░░░░░╚═╝░░╚═╝░╚═════╝░░░░╚═╝░░░╚═╝░░╚═╝╚═════╝░
 */
let frutas = ['laranja', 'maçã', 'banana', 'melancia']
// vetor = ['🍊', '🍎', '🍌', '🍉']

// ║▌║█║▌│║▌║▌█║▌║█║▌│║▌║▌█║▌║█║▌│║▌║▌█║▌║█║▌│║▌


// adicionar uma nova fruta ao vetor:



frutas.push('morango')
// push(''): inserção ao final do vetor:
// vetor = ['🍊', '🍎', '🍌', '🍉'] + ['🍓']
// vetor = ['🍊', '🍎', '🍌', '🍉', '🍓']

console.log(frutas)
// ║▌║█║▌│║▌║▌█║▌║█║▌│║▌║▌█║▌║█║▌│║▌║▌█║▌║█║▌│║▌


console.log('=^..^=   =^..^=   =^..^=    =^..^=    =^..^=    =^..^=    =^..^= ')


frutas.unshift('kiwi')
// unshift(''): inserção ao início do vetor:
// vetor = ['🥝'] + ['🍊', '🍎', '🍌', '🍉', '🍓']
// vetor = ['🥝','🍊', '🍎', '🍌', '🍉', '🍓']

console.log(frutas)
// ║▌║█║▌│║▌║▌█║▌║█║▌│║▌║▌█║▌║█║▌│║▌║▌█║▌║█║▌│║▌


console.log('=^..^=   =^..^=   =^..^=    =^..^=    =^..^=    =^..^=    =^..^= ')


frutas.splice(3, 0, 'uva')
// splice(''): inserção em posição intermediária do vetor:
// O canivete suíço dos vetores!

// Parâmetros:
// 1º: a posição de inserção;
// 2º: quantidade de elementos a serem apagados;
// (na inserção, informamos 0)
// 3º: o novo elemento a ser inserido ao vetor.
// 🍇
// ['🥝','🍊', '🍎', '🍌', '🍉', '🍓']

console.log(frutas)
// ║▌║█║▌│║▌║▌█║▌║█║▌│║▌║▌█║▌║█║▌│║▌║▌█║▌║█║▌│║▌


console.log('=^..^=   =^..^=   =^..^=    =^..^=    =^..^=    =^..^=    =^..^= ')


// pop(''): retira o último elemento do vetor:
let ultimo = frutas.pop()

console.log(ultimo,frutas)
// ║▌║█║▌│║▌║▌█║▌║█║▌│║▌║▌█║▌║█║▌│║▌║▌█║▌║█║▌│║▌


console.log('=^..^=   =^..^=   =^..^=    =^..^=    =^..^=    =^..^=    =^..^= ')


let primeiro = frutas.shift()
// shift(''): retira o primeiro elemento do vetor:

console.log(primeiro, frutas)
// ║▌║█║▌│║▌║▌█║▌║█║▌│║▌║▌█║▌║█║▌│║▌║▌█║▌║█║▌│║▌


console.log('=^..^=   =^..^=   =^..^=    =^..^=    =^..^=    =^..^=    =^..^= ')


let intermed = frutas.splice(3, 1)
// splice(''): retira um elemento de qualquer posição:
// Parâmetros:
// 1º: a posição do elemento a ser removido;
// 2º: quantidade de elementos a serem removidos;
// (na remoção, informamos pelo menos 1)

// sempre retornará um vetor, mesmo que vazio, na remoção.

console.log(intermed, frutas)
// ║▌║█║▌│║▌║▌█║▌║█║▌│║▌║▌█║▌║█║▌│║▌║▌█║▌║█║▌│║▌


console.log('=^..^=   =^..^=   =^..^=    =^..^=    =^..^=    =^..^=    =^..^= ')


// Os métodos de inserção:
// push(), unshift() e splice()
// são capazes de inserir vários elementos de uma única vez.
frutas.push('jabuticaba', 'abacaxi', 'amora', 'abacate')
// 🍐🍑🍒🍓 🥥🍏🥭🍅🍍

console.log(frutas)
// ║▌║█║▌│║▌║▌█║▌║█║▌│║▌║▌█║▌║█║▌│║▌║▌█║▌║█║▌│║▌


console.log('=^..^=   =^..^=   =^..^=    =^..^=    =^..^=    =^..^=    =^..^= ')


// Percurso (1): for tradicional:
for(let i = 0; i < frutas.length; i++){
    console.log(frutas[i])
}


console.log('=^..^=   =^..^=   =^..^=    =^..^=    =^..^=    =^..^=    =^..^= ')


// Percurso (2): for tradicional em ordem inversa:
for(let i = frutas.length - 1; i >= 0; i--){
    console.log(frutas[i])
}


console.log('=^..^=   =^..^=   =^..^=    =^..^=    =^..^=    =^..^=    =^..^= ')


// Percurso (3): for..of:
for(let f of frutas){
    console.log(f)
}


console.log('=^..^=   =^..^=   =^..^=    =^..^=    =^..^=    =^..^=    =^..^= ')


// Percurso (4): forEach()
// forEach(): tem como parâmetro uma função
// que será chamada p/ cada elemento do vetor
frutas.forEach(function(elemento){
    console.log(elemento)
})
