/*

        _..._            ★ ° . *　　　°　.　°☆ 　. * ● ¸ .　 * 　.　 　★     ° :.☆
      .'     '.      _   . 　　　★ 　° :. ★　 * • ○ ° ★　 . 　　　★ 　° :. 　 * • ○ ° ★　 
     /    .-""-\   _/ \  .　 * 　.　 　　　　　. 　 ★ ° . *　　　°　.　°☆ 　. * ● ¸ 
   .-|   /:.   |  |   |  ° 　. ● . ★ ° . *　　　°　.　°☆ ° . *　　　°　.　°☆ 　. * ● ¸ . 
   |  \  |:.   /.-'-./   　. * ● ¸ . 　　　★ 　° :●. 　 * ° °☆ 　¸. ● . 　　★　★ 
   | .-'-;:__.'    =/    • ○ ° ★　 .　 * 　.　 　　　　　.　★　　　　. 　 ° 　.  . 　    ★　 　　
   .'=  *=|     _.='      　 ° 　. ● . ★ ° . *　　　°　.　° :. 　 * • ○ ° ★　 .　 * 　.　 
  /   _.  |    ;       °☆ 　. * ● ¸ . 　　　★ 　°☆ 　. * ● ¸ . 　　　★ 　
 ;-.-'|    \   |      ° :. 　 * • ○ ° ★　 .　 * 　.　  　 ° 　. ● . ★ ° . *　　　°　.　
/   | \    _\  _\     　★　　　　. 　 ° 　.  . 　    ★　 　　• ○ ° ★　 .　 * 　.　 　　　　　.
\__/'._;.  ==' ==\    ° °☆ 　¸. ● . 　　★　★ 　. * ● ¸ . 　　　★ 　° :●. 　 * 
         \    \   |   ° . *　　　°　.　°☆ 　. * ● ¸ . ° 　. ● . ★ ° . *　　　°　.　°☆ 
         /    /   /   ★ ° . *　　　°　.　°☆ 　. * ● ¸ .　 * 　.　 　　　　　. 　 
         /-._/-._/   . 　　　★ 　° :. 　 * • ○ ° ★　 . 　　　★ 　° :. ★　 * • ○ ° ★　 
         \   `\  \  .　 * 　.　 　★     ° :.☆★ ° . *　　　°　.　°☆ 　. * ● ¸ 
          `-._/._/  

              .........                     ╔═══╗╔═══╗╔════╗╔═══╗╔╗─╔╗╔════╗╔╗─╔╗╔═══╗╔═══╗
            .'------.' |                    ║╔══╝║╔═╗║║╔╗╔╗║║╔═╗║║║─║║║╔╗╔╗║║║─║║║╔═╗║║╔═╗║
           | .-----. | |                    ║╚══╗║╚══╗╚╝║║╚╝║╚═╝║║║─║║╚╝║║╚╝║║─║║║╚═╝║║║─║║
           | |     | | |                    ║╔══╝╚══╗║──║║──║╔╗╔╝║║─║║──║║──║║─║║║╔╗╔╝║╚═╝║
         __| |     | | |;. _______________  ║╚══╗║╚═╝║──║║──║║║╚╗║╚═╝║──║║──║╚═╝║║║║╚╗║╔═╗║
        /  |*`-----'.|.' `;              // ╚═══╝╚═══╝──╚╝──╚╝╚═╝╚═══╝──╚╝──╚═══╝╚╝╚═╝╚╝─╚╝
       /   `---------' .;'              //      ╔═══╗╔═══╗     ╔═══╗╔═══╗╔═══╗╔═══╗╔═══╗
 /|   /  .''''////////;'               //       ╚╗╔╗║║╔══╝     ╚╗╔╗║║╔═╗║╚╗╔╗║║╔═╗║║╔═╗║
|=|  .../ ######### /;/               //|       ─║║║║║╚══╗     ─║║║║║║─║║─║║║║║║─║║║╚══╗
|/  /  / ######### //                //||       ─║║║║║╔══╝     ─║║║║║╚═╝║─║║║║║║─║║╚══╗║
   /   `-----------'                // ||       ╔╝╚╝║║╚══╗     ╔╝╚╝║║╔═╗║╔╝╚╝║║╚═╝║║╚═╝║
  /________________________________//| ||       ╚═══╝╚═══╝     ╚═══╝╚╝─╚╝╚═══╝╚═══╝╚═══╝
  `--------------------------------' | ||   
   : | ||      | || |__LL__|| ||     | ||     █▀█ █▀█ █▀█ █▀▀ ░   █▀▀ ▄▀█ █░█ █▀ ▀█▀ █▀█
   : | ||      | ||         | ||     `""'     █▀▀ █▀▄ █▄█ █▀░ ▄   █▀░ █▀█ █▄█ ▄█ ░█░ █▄█
   n | ||      `""'         | ||              
   M | ||                   | ||                       █▀▀ █ █▄░█ ▀█▀ █▀█ ▄▀█
     | ||                   | ||                       █▄▄ █ █░▀█ ░█░ █▀▄ █▀█
     `""'                   `""'
*/

// =^..^=   =^..^=   =^..^=    =^..^=    =^..^=    =^..^=    =^..^=

/*
   ██░▀██████████████▀░██
   █▌▒▒░████████████░▒▒▐█  Objetos são estruturas de linguagem .js que permitem armazenar
   █░▒▒▒░██████████░▒▒▒░█  múltiplos vetores em uma variável, tal como os vetores.
   ▌░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░▐  
   ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░   |￣￣￣￣￣ ￣|          
  ███▀▀▀██▄▒▒▒▒▒▒▒▄██▀▀▀██  |            |          
  ██░░░▐█░▀█▒▒▒▒▒█▀░█▌░░░█  |            |          
   ▌░░░▐▄▌░▐▌▒▒▒▐▌░▐▄▌░░▐▌  |            |          
   █░░░▐█▌░░▌▒▒▒▐░░▐█▌░░█   | ＿＿＿＿＿__|          
   ▒▀▄▄▄█▄▄▄▌░▄░▐▄▄▄█▄▄▀▒   (\__/) ||
   ░░░░░░░░░░└┴┘░░░░░░░░░   (•ㅅ•) ||
   ██▄▄░░░░░░░░░░░░░░▄▄██   / 　 づ
   ████████▒▒▒▒▒▒████████  No entanto, ao contrário destes, 
   █▀░░███▒▒░░▒░░▒▀██████  as posições dos valores são:
   █▒░███▒▒╖░░╥░░╓▒▐█████  NOMEADAS, não NUMERADAS,
   █▒░▀▀▀░░║░░║░░║░░█████
   ██▄▄▄▄▀▀┴┴╚╧╧╝╧╧╝┴┴███
   ██████████████████████

*/

// =^..^=   =^..^=   =^..^=    =^..^=    =^..^=    =^..^=    =^..^=

/*
| ￣￣￣￣￣￣￣￣￣￣ | ╱╭━━┳━┳━┳╮ // Forma tradicional:
|     Criando um     | ━┫╱┓┣┳━━━╯ // let objeto1 = new Object()
|    objeto vazio!   | ╱╱╱┃┃╯
|＿＿＿＿＿＿＿＿＿＿＿| ━┫╱╰┛╯
       \ (•◡•) /      ╱╰━━━╯
        \      /      ╱╭━━┳━┳━┳╮ // Forma moderna:
          ———         ━┫╱┓┣┳━━━╯ // let objeto2 = {}
         |    |       ╱╱╱┃┃╯     // + simples
         |_   |_      ━┫╱╰┛╯     // + usada
                      ╱╰━━━╯
*/

let objeto1 = new Object()

let objeto2 = {}

/*
──────▄▀▄─────▄▀▄                                                    ──────▄▀▄─────▄▀▄
─────▄█░░▀▀▀▀▀░░█▄                                                   ─────▄█░░▀▀▀▀▀░░█▄
─▄▄──█░░░░░░░░░░░█──▄▄                                               ─▄▄──█░░░░░░░░░░░█──▄▄
█▄▄█─█░░▀░░┬░░▀░░█─█▄▄█                                              █▄▄█─█░░▀░░┬░░▀░░█─█▄▄█
          ░█████╗░██████╗░░░░░░██╗███████╗████████╗░█████╗░░██████╗  ░█████╗░░░░░██╗
          ██╔══██╗██╔══██╗░░░░░██║██╔════╝╚══██╔══╝██╔══██╗██╔════╝  ██╔══██╗░░░██╔╝
          ██║░░██║██████╦╝░░░░░██║█████╗░░░░░██║░░░██║░░██║╚█████╗░  ██║░░╚═╝░░██╔╝░
          ██║░░██║██╔══██╗██╗░░██║██╔══╝░░░░░██║░░░██║░░██║░╚═══██╗  ██║░░██╗░██╔╝░░
          ╚█████╔╝██████╦╝╚█████╔╝███████╗░░░██║░░░╚█████╔╝██████╔╝  ╚█████╔╝██╔╝░░░
          ░╚════╝░╚═════╝░░╚════╝░╚══════╝░░░╚═╝░░░░╚════╝░╚═════╝░  ░╚════╝░╚═╝░░░░

██████╗░██████╗░░█████╗░██████╗░██████╗░██╗███████╗██████╗░░█████╗░██████╗░███████╗░██████╗
██╔══██╗██╔══██╗██╔══██╗██╔══██╗██╔══██╗██║██╔════╝██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔════╝
██████╔╝██████╔╝██║░░██║██████╔╝██████╔╝██║█████╗░░██║░░██║███████║██║░░██║█████╗░░╚█████╗░
██╔═══╝░██╔══██╗██║░░██║██╔═══╝░██╔══██╗██║██╔══╝░░██║░░██║██╔══██║██║░░██║██╔══╝░░░╚═══██╗
██║░░░░░██║░░██║╚█████╔╝██║░░░░░██║░░██║██║███████╗██████╔╝██║░░██║██████╔╝███████╗██████╔╝
╚═╝░░░░░╚═╝░░╚═╝░╚════╝░╚═╝░░░░░╚═╝░░╚═╝╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝╚═════╝░╚══════╝╚═════╝░
*/

/*
𝑈𝑚𝑎 𝑝𝑟𝑜𝑝𝑟𝑖𝑒𝑑𝑎𝑑𝑒 𝑒́ 𝑢𝑚 𝑝𝑎𝑟 𝑓𝑜𝑟𝑚𝑎𝑑𝑜 𝑝𝑒𝑙𝑜:
𝗇𝗈𝗆𝖾 𝖽𝖺 𝗉𝗋𝗈𝗉𝗋𝗂𝖾𝖽𝖺𝖽𝖾 : 𝘦 𝘷𝘢𝘭𝘰𝘳 𝘥𝘢 𝘱𝘳𝘰𝘱𝘳𝘪𝘦𝘥𝘢𝘥𝘦

𝙏𝙖𝙢𝙗𝙚́𝙢 𝙘𝙝𝙖𝙢𝙖𝙙𝙖 𝙙𝙚 𝙖𝙩𝙧𝙞𝙗𝙪𝙩𝙤𝙨

Quando o nome da propriedade contém espaços ou
caracteres acentuados, declare-o entre aspas('').
*/

let pessoa = {
  'Nome Completo': 'Rafael Matias',
  'Data de Nascimento': '2001-04-28',
  Ocupacao: 'Estudante',
  Gostos: ['Arte', 'Cultura', 'Popular'],
  'Curso Matriculado': 'ADS',
  Periodo: 'Matutino',
  'Cidade de Origem':'Franca',
  Estado: 'São Paulo',
  Semestre: '4º Ciclo'
}

/*
              »»————-　★　————-««
           __..--''``---....___   _..._    __
 /// //_.-'    .-/";  `        ``<._  ``.''_ `. / // /
///_.-' _..--.'_    \                    `( ) ) // //
/ (_..-' // (< _     ;_..__               ; `' / ///
 / // // //  `-._,_)' // / ``--...____..-' /// / //
               »»————-　★　————-««

🅐🅒🅔🅢🅢🅐🅝🅓🅞 🅐🅢 🅟🅡🅞🅟🅡🅘🅔🅓🅐🅓🅔🅢 🅓🅔 🅤🅜 🅞🅑🅙🅔🅣🅞

*/

// Quando o nome da propriedade NÃO CONTÉM
//  espaços ou acentos, devemos acessá-la
//     usando a SINTAXE DO PONTO FINAL

console.log(pessoa.nome)
console.log(pessoa.gostos)

console.log('=^..^=   =^..^=   =^..^=    =^..^=    =^..^=    =^..^=    =^..^= ')

// Quando o nome da propriedade CONTÉM
//  espaços ou acentos, devemos acessá-la
//     usando a SINTAXE DOS COLCHETES

console.log(pessoa['Cidade de Origem'])
console.log(pessoa['Data de Nascimento'])

console.log('=^..^=   =^..^=   =^..^=    =^..^=    =^..^=    =^..^=    =^..^= ')

// ▂▃▄▅▆▇█▓▒░SINTAXE DOS COLCHETES░▒▓█▇▆▅▄▃▂
//                 SEMPRE FUNCIONA!!!

console.log(pessoa['Semestre'])
console.log(pessoa['Estado'])

console.log('=^..^=   =^..^=   =^..^=    =^..^=    =^..^=    =^..^=    =^..^= ')

/*

 ╰╮╰╮╰╮     
╭━━━━━━━╮╱  
╰━━━━━━━╯╱  
┃╭╭╮┏┏┏┏┣━╮ Uma consequência da SINTAXE DOS COLCHETES
┃┃┃┃┣┣┣┣┃╱┃ é a possibilidade de ter nomes de propriedades
┃╰╰╯┃┃┗┗┣━╯ dentro de uma várialvel.
╰━━━━━━━╯   

 */

// ╭─━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━─╮
// Vetor com o nome das propriedades:
// ╰─━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━─╯

let props = ['Nome Completo', 'Data de Nascimento', 'Ocupacao']

for(let p of props){
  console.log(pessoa[p])
}

console.log('=^..^=   =^..^=   =^..^=    =^..^=    =^..^=    =^..^=    =^..^= ')

// ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
//  Acrescentando novas propriedades a um objeto existente:
// ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

pessoa.email = 'Rafael@Matias.com'
pessoa['Telefone para Contato'] = '9 9966-6333'

/*
| ￣￣￣￣￣￣￣￣￣￣ | ╱╭━━┳━┳━┳╮ // console.log(pessoa)
|      Exibir o      | ━┫╱┓┣┳━━━╯ // 
|   objeto inteiro!  | ╱╱╱┃┃╯
|＿＿＿＿＿＿＿＿＿＿＿| ━┫╱╰┛╯
       \ (•◡•) /      ╱╰━━━╯
        \      /      
          ———         
         |    |       
         |_   |_      
                      
*/

console.log(pessoa)

console.log('=^..^=   =^..^=   =^..^=    =^..^=    =^..^=    =^..^=    =^..^= ')

// ║▌║█║▌│║▌║▌█║▌║█║▌│║▌║▌█║▌║█║▌│║▌║▌█
//      Iniciando um objeto vazio e
//     criando as propriedades depois
// ║▌║█║▌│║▌║▌█║▌║█║▌│║▌║▌█║▌║█║▌│║▌║▌█

let carro = {}

carro.modelo = 'Volksvagen'
carro.marca = 'Fusca'
carro.cor = 'Preto'
carro.ano = '1969'
carro['Nome do Proprietário'] = 'Rafael Matias'

console.log(carro)

console.log('=^..^=   =^..^=   =^..^=    =^..^=    =^..^=    =^..^=    =^..^= ')

CSSConditionRule.log ('Exibindo os nomes das propriedades do objeto "Pessoa":')

// for..in: retorna os nomes das propriedades de um objeto

for(let prop in pessoa){
  console.log(prop)
}

console.log('=^..^=   =^..^=   =^..^=    =^..^=    =^..^=    =^..^=    =^..^= ')

CSSConditionRule.log ('Exibindo os nomes das propriedades do objeto "Carro":')

// for..in: retorna os nomes das propriedades de um objeto

for(let atrib in carro){
  console.log(atrib)
}

console.log('=^..^=   =^..^=   =^..^=    =^..^=    =^..^=    =^..^=    =^..^= ')



for(let p in pessoa) {
  console.log(`${p} -> ${pessoa[p]}`)
}

console.log('=^..^=   =^..^=   =^..^=    =^..^=    =^..^=    =^..^=    =^..^= ')